<class>
	<keyword> class </keyword>
	<identifier>
		<name> If </name>
		<category> CLASS_DEC </category>
		<runningIndex> -1 </runningIndex>
	</identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> boolean </keyword>
		<identifier>
			<name> nestedIf </name>
			<category> SUBROUTINE_DEC </category>
			<runningIndex> -1 </runningIndex>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<symbolEntry>
					<name> a </name>
					<type> boolean </type>
					<key> 0 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> , </symbol>
				<symbolEntry>
					<name> b </name>
					<type> boolean </type>
					<key> 1 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> a </name>
						<category> VAR </category>
						<runningIndex> 0 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> b </name>
						<category> VAR </category>
						<runningIndex> 1 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> a </name>
								<category> VAR </category>
								<runningIndex> 0 </runningIndex>
							</identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> b </name>
										<category> VAR </category>
										<runningIndex> 1 </runningIndex>
									</identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> a </name>
										<category> VAR </category>
										<runningIndex> 0 </runningIndex>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<keyword> false </keyword>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
